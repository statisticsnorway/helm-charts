{{- if and (eq "backend" .Values.appType) (and ( or (eq (toString .Values.istioAppToAppAuth.enabled) "true") (eq (toString .Values.istioAppToAppAuth.enabled) "True")) .Values.istioAppToAppAuth.enabled) }}

# Define template values as variables here, due to range changing scope
{{- $applicationName := include "app.name" . }}
{{- $defaultLabels := include "default.labels" . }}

{{- range .Values.istioAppToAppAuth.from }}
# Authorization policy to allow for another app to access (any) endpoints in this app.
# One policy for each service account that is allowed to access this app.
---
{{- if and .serviceAccount (or .namespace .appName) }}
{{- fail "You must specify either 'serviceAccount' or 'namespace' & 'appName', not both." }}
{{- end }}

{{- if and (or .namespace .appName) (not (and .namespace .appName)) }}
{{- fail "Only one the values ('namespace' or 'appName') were specified. Both must be specified." }}
{{- end }}

{{- $constructedServiceAccount := "" }}
{{- if not .serviceAccount }}
# Construct the service account string when '.namespace' '.appName' configuration is used
{{- $constructedServiceAccount = printf "cluster.local/ns/%s/sa/%s-sa" .namespace .appName }}
{{- end }}

{{- $serviceAccount := (default $constructedServiceAccount .serviceAccount) }}

# Create a "user-friendly" name for the service account, used in policy name
{{- $serviceAccountName := splitList "/" $serviceAccount | last }}

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: "{{ $applicationName }}-to-{{ $serviceAccountName }}-app-to-app-allow-policy"
  labels:
{{ $defaultLabels | indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ $applicationName }}
  action: ALLOW
  rules:
    - from:
        - source:
            # The list of service accounts to grant access
            principals:
              - "{{ $serviceAccount }}"
{{- end }}
{{- end }}
