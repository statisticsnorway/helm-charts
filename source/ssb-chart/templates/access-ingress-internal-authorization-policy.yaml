{{- if and .Values.access (and .Values.access.ingress .Values.access.ingress.internal) }}
{{- range .Values.access.ingress.internal }}
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: "{{ template "app.name" $ }}-ingress-{{.namespace }}-{{ .application }}"
  labels:
{{ include "default.labels" $ | indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ template "app.name" $ }}
  action: ALLOW
  rules:
    {{- $fromPrincipal := printf "cluster.local/ns/%s/sa/%s-sa" .namespace .application }}
  {{- if not .rules }}
    - from:
        - source:
            principals: [ "{{ $fromPrincipal }}" ]
  {{- else }}
    {{- range .rules }}
    - from:
        - source:
            principals: [ "{{ $fromPrincipal }}" ]
            {{- if .jwt }}
            {{- /* The request identity is in the format of "<ISS>/<SUB>" */}}
            requestPrincipals: [ "{{ .jwt.issuer }}/*" ]
            {{- end}}
{{/*      If .paths or .methods are defined*/}}
      {{- if or .paths .methods }}
      to:
        - operation:

            {{- if .paths}}
            paths:
              {{- range .paths }}
              - "{{ . }}"
              {{- end }}
            {{- end }}
            {{- if .methods}}
            methods:
              {{- range .methods }}
              - "{{ . }}"
              {{- end }}
            {{- end }}
      {{- end }}
{{/*     TODO: Consider if 'when' should be supported       */}}
      {{- if .when }}
      when:
        {{- range .when  }}
{{/*        TODO: Fix if 'when' should be supported  */}}
        - {{ . }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
---
  {{- if .rules }}
    {{/* Merge all jwt-rules into one list, such that we only need one RequestAuthentication per element in access.ingress.internal */}}
    {{- $jwtRules := list }}
    {{- range .rules }}
      {{- if .jwt }}
        {{- $jwtRules = append $jwtRules .jwt }}
      {{- end }}
    {{- end }}
    {{- if $jwtRules }}
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: "{{ template "app.name" $ }}-ingress-{{.namespace }}-{{ .application }}-request-auth"
  labels:
{{ include "default.labels" $| indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ template "app.name" $ }}
  jwtRules:
    # Istio will use OpenId discovery to fetch
    # the public certificate needed to validate JWT signatures.
      {{- range $jwtRules }}
    - issuer: "{{ .issuer }}"
      # Only allow the request if the JWT contains at least one audience match
      # in the list below.
      audiences:
        - "{{ required "Audience is required if jwt is in use" .audience }}"
      # Forward this token to the upstream application so it can read user info
      # from the JWT or use it for authentication in calls to other backends.
      forwardOriginalToken: true
      {{- end }}
    {{- end }}
  {{- end }}
---
{{- end}}
{{- end}}



