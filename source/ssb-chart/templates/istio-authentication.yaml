# The RequestAuthentication enables JWT authentication in Istio.
#
# Ref: https://istio.io/latest/docs/reference/config/security/request_authentication/
{{- if and (eq "backend" .Values.appType) (and ( or (eq (toString .Values.istioEndUserAuth.enabled) "true") (eq (toString .Values.istioEndUserAuth.enabled) "True")) .Values.istioEndUserAuth.enabled) }}
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: "{{ template "app.name" . }}-request-auth"
  labels:
{{ include "default.labels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ template "app.name" . }}
  jwtRules:
    # Keycloak is the default issuer. Istio will use OpenId discovery to fetch
    # the public certificate needed to validate JWT signatures.
    - issuer: "https://keycloak.{{ template "app.cluster" . }}.{{ .Values.domain }}/auth/realms/ssb"
      # Only allow the request if the JWT contains at least one audience match
      # in the list below. If no audience is specified then the application
      # itself is listed as allowed audience.
      audiences:
{{- if .Values.istioEndUserAuth.audience }}
{{- range .Values.istioEndUserAuth.audience }}
      - "{{ . }}"
{{- end }}
{{- else }}
      - "{{ template "app.name" . }}"
{{- end }}
      # Forward this token to the upstream application so it can read user info
      # from the JWT or use it for authentication in calls to other backends.
      forwardOriginalToken:  true
---
# The AuthorizationPolicy is needed to enforce JWT authentication because
# RequestAuthentication by default works in permissive mode (allowing
# unauthenticated requests).
#
# Ref: https://istio.io/latest/docs/reference/config/security/authorization-policy/
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: "{{ template "app.name" . }}-default-auth-policy"
  labels:
{{ include "default.labels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ template "app.name" . }}
  action: ALLOW
  rules:
  - from:
    # Allow any principal (iss/sub) that is authenticated with (issuer) in the
    # RequestAuthentication policy above. We could have specified the issuer her
    # as well, but since the policies are tightly coupled (same istio-proxy
    # enforces both) we know that the only issuer allowed is the one configured
    # in the RequestAuthentication policy above.
    - source:
        requestPrincipals: ["*"]
    # Note that if the requests comes from another application
    # (backend-to-backend) there are two ways to authenticate that call.
    # 1. For user originated requests the caller could forward a valid JWT and
    #    this policy will cover the authentication.
    # 2. OR you can specify a "principal" as an allowed source and authenticate
    #    using Istio mTLS and the callers "spiffe" identity (SA). Note that we
    #    don't support the latter through HelmRelease config yet, but it should
    #    be simple to add. E.g:
    # - source:
    #     principal: ["cluster.local/ns/<app-name>/sa/<app-name-serviceaccount>"]
{{- end }}
