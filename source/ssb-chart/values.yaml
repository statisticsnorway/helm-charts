# -- Kubernetes deployment type.
# Optional.
type: "deployment"

# -- Name of the application (also used for naming other Kubernetes resources).
# Required.
name: "myapp"

# -- Application type: `"backend"` or `"frontend"`.
# Notet that this setting will impact how authentication is configured.
# Required.
appType: ""

# -- Which Kubernetes cluster the app will be deployd to.
# Required.
cluster:

# -- Set to `trueÂ´ to expose application publicly through the ingress gateway.
# Optional.
exposed: false

# -- Which domain the app will belong to.
# Optional.
domain: ssb.no

# -- What billing project to use as label for the objects.
# Required.
billingProject: "default"

# -- (object) Application image.
# Required.
# @default -- `{"pullPolicy":"Always","repository":"","tag":""}`
# @notationType -- yaml
image:
  # -- Image repository. Required.
  # @default -- ""
  repository: gcr.io/distroless/static
  # -- Image tag. Required.
  # @default -- ""
  tag: "latest"
  # -- Image pullPolicy. Optional.
  pullPolicy: Always

# -- Number of pods to scale to (not HPA).
# Optional.
replicaCount: 1

# -- Node selector for selecting where the to schedule the workload.
# Standard nodes are labeled "ssb-node: standard". Jupyter nodes are labeled "ssb-node: jupyter".
# See examples section below for more details.
# Optional.
nodeSelector: {}

# -- Tolerations allow the scheduler to schedule pods on nodes with matching taints.
# The following taints exists for jupyter nodepools: `ssb-node=jupyter`
# See examples section below for more details.
# Optional.
tolerations: []

# -- Node affinity is a set of rules used by the scheduler to determine where a pod
# can be placed. The rules are defined using custom labels on nodes and label
# selectors specified in pods. Node affinity allows a pod to specify an affinity
# (or anti-affinity) towards a group of nodes it can be placed on.
# See examples section below for more details.
# Optional.
affinity: {}

# -- (object) Main application port. Use 'extraPorts' for additional ports. This was
# separated to simplify the automation for developer usage.
# Optional.
# @notationType -- yaml
port:
  # -- name must start with protocol name (i.e.http or tcp). The name field is
  # automatically truncated to 15 symbols.
  # Optional.
  name: "http-main"
  # -- Port exposed by container.
  # Optional.
  containerport: 80
  # -- Port exposed by service object.
  # Optional.
  serviceport: 80
  # -- The target port on the POD to redirect traffic from the Service. This will usually be the
  # applications container port.
  # Optional.
  targetport:

# -- List of extra application ports in case the application needs to expose ports
# in addition to the normal application port. Usually not needed, unless using
# things like 'grpc' in addition to 'http'. For these extra ports it usually
# makes sense to use the same port for 'containerport' and 'targetport' to avoid
# collision with the normal application port. This should only be used if your
# application exposes more than one port. If your application exposes more than
# one port, you should override 'port' to suit your needs (e.g. if you only
# need 'http' or 'grpc').
# See examples section below for more details.
# Optional.
extraPorts: []

# -- Defines a set of environment variables for a main container of an app.
# In case of referring to volumes/secrets/configmaps remember to create those resources first
# See examples section below for more details.
# Optional.
environmentVariables:

# -- Defines a set of configs that should be deployed as a ConfigMap. Note that all
# configs will be created within one ConfigMap called <application_name>-config,
# but can be mounted to separate locations.
# See examples section below for more details.
# Optional.
configs: []

# -- Defines volumes available for mounting in pods.
# See examples section below for more details.
# Optional.
volumes: []

# -- Defines volume mounts for the application.
# See examples section below for more details.
# Optional.
volumeMounts: []

# -- (object) Persistence defines whether app requires persistent volume.
# Once `enabled: true` is defined, corresponding sections under `volumes:` and `volumeMounts` will be
# automatically added to the deployment template. Only one persistent volume is supported at the moment.
# Optional.
# @notationType -- yaml
persistence:
  # -- Enable persistent volume.
  # Optional.
  enabled: false
  # -- Supported storage classes: "standard", "ssd"
  # @default -- "standard"
  # Optional.
  storageClass:
  # -- Create PVC. Set to "false" to use existing manifest file.
  # Optional.
  createPvc: true
  # -- Set access mode: "ReadWriteOnce", "ReadOnlyMany", "ReadWriteMany", "ReadWriteOncePod".
  # Required if "createPvc: true".
  accessMode: ReadWriteOnce
  # -- PVC disk size.
  # Required if "createPvc: true".
  size: 1Gi
  # -- Mount path.
  # Required.
  folder: /data
  # -- Define owner user and owner group for the mounted volume.
  # NOTE: Only use this option if setting the `PodSecurityContext.fsGroup` to the containers
  # process UID (runAsUser) does NOT work.
  # Optional.
  owner:

# -- Defines additional containers to run in a pod. Bundles container settings into one
# yaml structure for simplicity. Follows the Kubernetes container spec.
# Optional.
sidecars:

# -- (object) Defines whether to create a service object for loadbalancing of pods and sets service type.
# Optional.
# @notationType -- yaml
service:
  enabled: true
  type: "ClusterIP"

# -- (object) Defines restrictions on resources requested and consumed by a single pod.
# Total calculated resources = resources*replicaCount.
# Ref:
#  * https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/
#  * https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/
# Optional.
# @notationType -- yaml
resources:
  enabled: true
  limits:
    #cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

# -- (object) Readiness and liveness probes for containers.
# Used format: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes.
# Don't put quotes on boolean and numerical values.
# @notationType -- yaml
probes:
  liveness:
    enabled: false
    # Original formatting starts here
    livenessProbe:
      httpGet:
        port: ""
        path: ""
      initialDelaySeconds: 60
      periodSeconds: 30
  readiness:
    enabled: false
    # Original formatting starts here
    readinessProbe:
      httpGet:
        port: ""
        path: ""
      initialDelaySeconds: 60
      periodSeconds: 30

# -- (object) If "enabled: true", sets prometheus label to a service to enable scraping by prometheus server.
# Don't put quotes on boolean and numerical values.
# Optional.
# @notationType -- yaml
metrics:
  enabled: false
  port: 80
  path: "/metrics"
  scheme: "https"

# -- (object) Kubernetes service account.
# SA name is generated from the application name with a "-sa" suffix.
# Ref. https://github.com/helm/helm/blob/master/docs/chart_best_practices/rbac.md.
# Optional.
# @notationType -- yaml
serviceAccount:
  create: true

# -- (object) Generates a simple "ingress" network policy (i.e. restrict incoming traffic to the application),
# that only allows traffic to 'port.containerport' (default) or 'port.targetport' (if specified), as well
# as any 'extraPorts'. This is a simple "ingress" network policy, "egress" traffic is not restricted here.
# See examples section below for more details.
# Optional.
# @notationType -- yaml
networkpolicy:
  enabled: true
  # -- Optionally create your own NetworkPolicy for the current application.
  overrideDefaultPolicy: {}


  # Two unique ID's are available for use with user/app authentication in todays platform
  #
  # 1. Keycloak unique client ID in the SSB Realm
  #    This is "audience" referenced in the current IstioEndUserAuth config.
  #    Caller and callee must agree on this authentication through the client config
  #    and the validation.
  #
  # 2. Istio Spiffe ID/K8s SA
  #   This is the "principal" referenced in AuthorizationPolicy manifest.
  #
  #   Applications must be referenced by their principal name
  #   which is the unique Service Account name tied to a Spiffe/ID assigned by Istio.
  #   This is needed to ensure the originity of the request (non-repudiation).
  #
  # The next (first) layer of security is Network policies. But note that these does not guarantee
  # non-repuditation. Inside K8s applications in network policies are referenced by namespace and/or pod
  # labels/names. These labels might not be unique.

  # Policy example for an app with SA/name "app1" in namespace "n1"
access:
  ingress:
#    external:
#      # Technical impl. details: In order to allow ingress from an ingress gateway
#      # the Istio AuthorizationPolicy need to specify the principal of the gateway. E.g:
#      #   principal: cluster.local/ns/istio-system/sa/istio-ingressgateway
#      gateways:
#        - type: public # Same as current "exposed: true"
#          rules:
#            - method: ["get"]
#              path: ["api/"]
#              jwt:
#                issuer: https://sso.example.com/auth/realms/ssb
#                audience: ekstern-client-id
#        - type: ssb-internal # Does not exist today, but could be used for SSB internal ingress.
#          rules:
#            - methods: ["POST"]
#              paths: ["api/"]
    internal:
      - application: app2
        namespace: n1
        serviceaccount: "cluster.local/ns/my-namespace/sa/some-app"
      # Allow from app3 in same namespace (n2)
      - application: app3
        namespace: n2

      # Allow traffic and do JWT validering from app3 from namespace n3
      - application: app3
        namespace: n3
        rules:
          - method: ["GET"]
            path: ["api/"]
            jwt:
              issuer: https://keycloak.ssb.no/auth/realms/ssb
              audience: app3 # <keycloak unik klientid i issuer>
      # Allow from app3 from namespace n3 for specific only on specified method and path (optional)
      - application: app3
        namespace: n3
        rules:
          - methods: ["GET"]
            paths: ["api/"]
          - methods: ["POST"]
            paths: ["internal/api/"]
      - application: app3
        namespace: n3
        rules:
          - methods: ["GET"]
            paths: ["api/"]
  egress:
  # Note: Cloudsql should still be configured via cloudsql-flag
    external:
      # Ekstern egress kan implementeres med en kombinasjon av
      # NetworkPolicy og (Istio ServiceEntry eller FQDN NetworkPolicy)
      # Allow HTTPS traffic to host
      - hosts:
          - "pypi.org"
        addresses:
          - "104.154.0.0/15"
        ports:
          - name: rabbit-mq
            port: 5671
            #TODO: Consider if only netpol protocols should be allowed (i.e. not HTTPS and other that ServiceEntry supports)
            protocol: TCP
      # Allow TCP traffic to host or IP address on port/protocol
      - addresses:
          - x.x.x.x
        ports:
          - name: rabbit-mq
            port: 5671
            #TODO: Consider if only netpol protocols should be allowed (i.e. not HTTPS and other that ServiceEntry supports)
            protocol: TCP
      - hosts:
          - "firestore.googleapis.com"
          - "ssb-team-forbruk-firebase-default-rtdb.europe-west1.firebasedatabase.app"
          - "ssb-team-forbruk-firebase.firebaseapp.com"
        ports:
          - name: https
            number: 443
            #TODO: Consider if only netpol protocols should be allowed (i.e. not HTTPS and other that ServiceEntry supports)
            protocol: HTTPS
    internal:
      # Intern egress kan kun implementeres med NetworkPolicy pÃ¥ L4
      # Allow egress to app3 in namespace n3
      - application: app3
        namespace: n3

# -- (object) PodSecurityContext.
# Default security context for pods. If set in both SecurityContext and PodSecurityContext,
# the value specified in SecurityContext takes precedence.
# Ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podsecuritycontext-v1-core.
# Optional.
# @notationType -- yaml
PodSecurityContext:
  # -- Containers in pod must run as a non-root user (e.g. not run as UID 0).
  runAsNonRoot:
  # -- The UID to run the entrypoint of the container process.
  # Defaults to the user specified in the image metadata if unspecified.
  runAsUser:
  # -- The GID to run the entrypoint of the container process. Uses runtime default if unset.
  runAsGroup:
  # -- All processes in the pod will be part of this supplementary group.
  # Supported volume mounts will be owned by this group.
  fsGroup:
  # -- (object) Limit the range of system calls allowed.
  # @notationType -- yaml
  seccompProfile:
    # -- RuntimeDefault: As defined by the container runtime.
    type: RuntimeDefault

# -- (object) Container SecurityContext for main application.
# Default restricted security context for the application.
# If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
# Optional.
# Ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#securitycontext-v1-core
# @notationType -- yaml
ContainerSecurityContext:
  # -- If processes should be allowed to gain more privileges than its parent process.
  allowPrivilegeEscalation: false
  # -- If processes in container can run privileged. This is equivalent to running as root on the host.
  privileged: false
  # -- If container should have a read-only root filesystem.
  readOnlyRootFilesystem: true
  # -- Container must run as a non-root user (e.g. not run as UID 0).
  runAsNonRoot: true
  # -- The UID to run the entrypoint of the container process.
  # Defaults to the user specified in the image metadata if unspecified.
  runAsUser: 1000
  # -- The GID to run the entrypoint of the container process. Uses runtime default if unset.
  runAsGroup: 1000
  # -- (object) The capabilities to add/drop when running containers.
  # Defaults to the default set of capabilities granted by the container runtime
  # @notationType -- yaml
  capabilities:
    drop: ["ALL"]
    add: []
  # -- (object) Limit the range of system calls allowed.
  # @notationType -- yaml
  seccompProfile:
    # -- RuntimeDefault: As defined by the container runtime.
    type: RuntimeDefault

# -- Defines a list of external https resources you need to be able to reach from
# your application. Wildcard is supported, but the Helm chart will replace '*'
# with 'wildcard' to avoid errors.
# See examples section below for more details.
# Optional.
egress: []

# (object) If enabled, you will get a Cloud SQL Proxy sidecar container to your application that can
# connect to an external instance specified in 'cloudsql.instance'. Aa egress entry is automatically added
# to allow access to the external instance using the 'cloudsql.ip'. Note that the default `cloudsql.version`
# is read from a shared configuration.
# Optional.
# @notationType -- yaml
cloudsql:
  enabled: false
  version:
  # -- Required.
  instance:
  # -- Required.
  ip:
  # -- Optional. Set to false if using Google connectors directly to omit adding a cloudsql-proxy.
  useSqlProxy: true

# (object) For "appType: frontend" an OAuth2 Proxy will be added as a sidecar and the "targetPort" will
# be set to "oauth2Proxy.port". The OAuth2 proxy depends on a Kubernetes secret containing the
# configuration and client credentials. Client configurations are added in the "platform" repository.
# NOTE: Do not add override default values here. Default values for oauth2Proxy is set in a shard config.
# @notationType -- yaml
oauth2Proxy:
  enabled:
  image:
  version:
  port:

# -- The 'backends' list is used to configure a backend-for-frontend (API gateway) to enable authenticated
# requests to other applications/API's. The proxy will forward request headers, including the authorization
# header. This will allow the app to make authenticated requests to the applications listed. Note that the
# application receiving the request must have the calling app in it's allowed audience list. A "backend"
# application is identified by a service name and a namespace. Required fields: "name" and "namespace".
# See examples section below for more details.
# Optional.
backends: []

# -- (object) This is used together with the 'backends' config to specify which container image and port
# should be used for the backend-for-frontend (API gateway).
# NOTE: Do not add default values here. Default values for apiGateway is set in a shared config.
# Optional.
# @notationType -- yaml
apiGateway:
  image:
  version:
  port:

# -- (object) Application authentication with Istio policies.
# Skip authentication for selected paths with "excludePaths".
# Require authentication for selected paths with "includePaths".
# Note that "includePaths" have precedence over "excludePaths".
# Customize which apps that can authenticate to get access using "audience".
# See examples section below for more details.
# Optional.
# @notationType -- yaml
istioEndUserAuth:
  # -- Enable or disable authentication.
  # Istio end-user auth is enabled by default for "AppType: backend".
  enabled: true

# -- Support for adding additional matching rules and routes to the Istio VirtualService object.
# Route traffic to a path specified in `name` to the service port specified `serviceport`.
# Note that "serviceport" must be unique and different from the default service port specified
# in "port.serviceport".
# See examples section below for more details.
# Optional.
routes: []

# -- Alternative subdomains for the application. The default subdomain is
# `<cluster-name>`. Note that subdomains must be added to DNS for this to work.
# See examples section below for more details.
# Optional.
subdomains: []

# -- Alternative hostnames for the application. The default hostname is
# `<application name>`. Note that urlhosts must be added to DNS for this to work.
# See examples section below for more details.
# Optional.
urlhosts: []
